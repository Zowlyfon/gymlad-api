// <auto-generated />
using System;
using GymLad.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GymLad.Migrations
{
    [DbContext(typeof(GymLadContext))]
    [Migration("20190618131733_identityautogen")]
    partial class identityautogen
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GymLad.Models.Exercise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<float>("TrainingMax");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GymLad.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("DoB");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<float>("Height");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<float>("Weight");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("GymLad.Models.PersonWeightChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PersonId");

                    b.Property<float>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonWeightChange");
                });

            modelBuilder.Entity("GymLad.Models.Set", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ExerciseId");

                    b.Property<int>("Reps");

                    b.Property<float>("Weight");

                    b.Property<long>("WorkoutId");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("GymLad.Models.SetTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ExerciseId");

                    b.Property<float>("Percentage");

                    b.Property<int>("Reps");

                    b.Property<long>("WorkoutTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("SetTemplates");
                });

            modelBuilder.Entity("GymLad.Models.Workout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PersonId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("GymLad.Models.WorkoutTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PersonId");

                    b.Property<string>("TemplateName");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("WorkoutTemplates");
                });

            modelBuilder.Entity("GymLad.Models.Exercise", b =>
                {
                    b.HasOne("GymLad.Models.Person", "Person")
                        .WithMany("Exercises")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymLad.Models.PersonWeightChange", b =>
                {
                    b.HasOne("GymLad.Models.Person", "Person")
                        .WithMany("PersonWeightChanges")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymLad.Models.Set", b =>
                {
                    b.HasOne("GymLad.Models.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymLad.Models.Workout", "Workout")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymLad.Models.SetTemplate", b =>
                {
                    b.HasOne("GymLad.Models.Exercise", "Exercise")
                        .WithMany("SetTemplates")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymLad.Models.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("SetTemplates")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymLad.Models.Workout", b =>
                {
                    b.HasOne("GymLad.Models.Person", "Person")
                        .WithMany("Workouts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymLad.Models.WorkoutTemplate", b =>
                {
                    b.HasOne("GymLad.Models.Person", "Person")
                        .WithMany("WorkoutTemplates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
